kind: Template
apiVersion: v1
metadata:
  name: launchpad
  annotations:
    openshift.io/display-name: "Launchpad (Frontend + Backend + Mission Control)"
    description: This application consists of the combination of Mission Control and the Backend and Frontend
    tags: instant-app,launchpad
    iconClass: icon-shadowman
    template.openshift.io/long-description: This application consists of the combination of Mission Control, Backend and Frontend
    template.openshift.io/provider-display-name: Red Hat, Inc.
    template.openshift.io/documentation-url: https://github.com/openshiftio
    template.openshift.io/support-url: https://access.redhat.com
message: "The following service(s) have been created in your project: mission-control, launchpad-backend, launchpad-frontend.\n\nFor more information about using this template, including OpenShift considerations, see https://github.com/openshiftio"
labels:
  template: launchpad
parameters:
- name: LAUNCHPAD_MISSIONCONTROL_GITHUB_USERNAME
  displayName: Your GitHub username
  description: Your GitHub username (leave empty when using Keycloak)
- name: LAUNCHPAD_MISSIONCONTROL_GITHUB_TOKEN
  displayName: Your GitHub Mission Control access token
  description: Your GitHub Mission Control access token (leave empty when using Keycloak)
- name: LAUNCHPAD_MISSIONCONTROL_OPENSHIFT_API_URL
  displayName: Target OpenShift API URL
  description: The base URL of the OpenShift API where the launched boosters
    should be created (ie. https://hostname[:port] or https://ipaddress[:port]).
    Leave the default value when targetting the same OpenShift/Minishift you are
    running this on
  value: https://openshift.default.svc.cluster.local
  required: true
- name: LAUNCHPAD_MISSIONCONTROL_OPENSHIFT_CONSOLE_URL
  displayName: Target OpenShift Console URL
  description: The base URL of the OpenShift Console where the launched boosters
    should be created (ie. https://hostname[:port] or https://ipaddress[:port]).
    When targetting the same OpenShift/Minishift instance you are running this on you
    can most likely look at this page's address bar of your browser and copy the URL
    Example value (https://$HOSTNAMEORIP:8443)
  value:
  required: true
- name: LAUNCHPAD_MISSIONCONTROL_OPENSHIFT_USERNAME
  displayName: OpenShift user name
  description: OpenShift user (leave empty when using Keycloak)
  value: developer
- name: LAUNCHPAD_MISSIONCONTROL_OPENSHIFT_PASSWORD
  displayName: OpenShift password
  description: OpenShift password (leave empty when using Keycloak)  
  value: developer
- name: LAUNCHPAD_KEYCLOAK_URL
  displayName: KeyCloak URL
  description: The URL (with the /auth part) of a Keycloak installation to perform SSO
    authentication (leave empty if you've explicitly specified GItHub/OpenShift
    authentication above)
  value: https://sso.openshift.io/auth
- name: LAUNCHPAD_KEYCLOAK_REALM
  displayName: KeyCloak Realm
  description: The keycloak realm to be used (leave empty if you've explicitly specified
    GitHub/OpenShift authentication above)
  value: osio-launch-prod
- name: LAUNCHPAD_TRACKER_SEGMENT_TOKEN
  displayName: Segment Token
  description: The token to use for Segment tracking. Leaving this empty will disable
    tracking. This must be set to the proper tokens for staging and production!
- name: LAUNCHPAD_BACKEND_CATALOG_GIT_REPOSITORY
  displayName: Catalog Git Repository
  description: The GitHub repository containing the booster catalog
  value: https://github.com/openshiftio/booster-catalog.git
  required: true
- name: LAUNCHPAD_BACKEND_CATALOG_GIT_REF
  displayName: Catalog Git Reference
  description: The Git reference to use for the above repository
  value: master
  required: true
- name: MISSIONCONTROL_IMAGE
  value: openshiftio/launchpad-missioncontrol
  required: true
- name: MISSIONCONTROL_IMAGE_TAG
  value: v10
  required: true
- name: BACKEND_IMAGE
  value: openshiftio/launchpad-backend
  required: true
- name: BACKEND_IMAGE_TAG
  value: v9
  required: true
- name: FRONTEND_IMAGE
  value: openshiftio/launchpad-frontend
  required: true
- name: FRONTEND_IMAGE_TAG
  value: v9
  required: true
objects:
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: launchpad
  data:
    launchpad.missioncontrol.github.username: ${LAUNCHPAD_MISSIONCONTROL_GITHUB_USERNAME}
    launchpad.missioncontrol.github.token: ${LAUNCHPAD_MISSIONCONTROL_GITHUB_TOKEN}
    launchpad.missioncontrol.openshift.username: ${LAUNCHPAD_MISSIONCONTROL_OPENSHIFT_USERNAME}
    launchpad.missioncontrol.openshift.password: ${LAUNCHPAD_MISSIONCONTROL_OPENSHIFT_PASSWORD}
    launchpad.missioncontrol.openshift.api.url: ${LAUNCHPAD_MISSIONCONTROL_OPENSHIFT_API_URL}
    launchpad.missioncontrol.openshift.console.url: ${LAUNCHPAD_MISSIONCONTROL_OPENSHIFT_CONSOLE_URL}
    launchpad.backend.catalog.git.repository: ${LAUNCHPAD_BACKEND_CATALOG_GIT_REPOSITORY}
    launchpad.backend.catalog.git.ref: ${LAUNCHPAD_BACKEND_CATALOG_GIT_REF}
    launchpad.keycloak.url: ${LAUNCHPAD_KEYCLOAK_URL}
    launchpad.keycloak.realm: ${LAUNCHPAD_KEYCLOAK_REALM}
    launchpad.tracker.segment.token: ${LAUNCHPAD_TRACKER_SEGMENT_TOKEN}
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: launchpad-nginx
  data:
    nginx.conf: |-
      daemon off;
  
      error_log /dev/stdout debug;
      pid /run/nginx.pid; 
  
      events {
          worker_connections  1024;
      }
  
      http {
  
          default_type  application/octet-stream;
  
          log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for"';
  
          access_log /dev/stdout;
  
          access_log          /dev/stdout main;                                                                                                                                                                                              
          client_body_temp_path /tmp;                                                                                                                                                                                                        
          fastcgi_temp_path /tmp;                                                                                                                                                                                                            
          scgi_temp_path /tmp;                                                                                                                                                                                                               
          proxy_temp_path /tmp;                                                                                                                                                                                                              
          uwsgi_temp_path /tmp;                                                                                                                                                                                                              
          sendfile            on;                                                                                                                                                                                                            
          tcp_nopush          on;                                                                                                                                                                                                            
          tcp_nodelay         on;                                                                                                                                                                                                            
          keepalive_timeout   65;                                                                                                                                                                                                            
          types_hash_max_size 2048;                                                                                                                                                                                                          
                                                                                                                                                                                                                                            
          include             /etc/nginx/mime.types;   
          
          upstream backend {
            server launchpad-backend:8080;
          }      
  
          upstream frontend {
            server launchpad-frontend:8080;
          }      
  
          upstream missioncontrol {
            server launchpad-missioncontrol:8080;
          }                 
  
  
          server {
  
              client_body_temp_path /tmp/nginx_client_temp 1 2;
  
              listen       8080;
              root         /usr/share/nginx/html;
  
              
  
              location / {
                add_header 'Access-Control-Allow-Origin' "$http_origin";
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
  
                proxy_pass http://frontend/;
              }
  
              location /status/ {
                proxy_pass http://missioncontrol/status/;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
              }
  
              location /launchpad/ {
                add_header 'Access-Control-Allow-Origin' "$http_origin";
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
  
                proxy_pass http://backend/launchpad/;
              }
          }
      }
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: launchpad-backend
  spec:
    tags:
    - name: latest
      from:
        kind: DockerImage
        name: openshiftio/launchpad-backend
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: launchpad-frontend
  spec:
    tags:
    - name: latest
      from:
        kind: DockerImage
        name: openshiftio/launchpad-frontend
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: launchpad-missioncontrol
  spec:
    tags:
    - name: latest
      from:
        kind: DockerImage
        name: openshiftio/launchpad-missioncontrol
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: launchpad-missioncontrol
  spec:
    replicas: 1
    selector:
      deploymentconfig: launchpad-missioncontrol
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          deploymentconfig: launchpad-missioncontrol
      spec:
        containers:
        - env:
          - name: LAUNCHPAD_MISSIONCONTROL_OPENSHIFT_API_URL
            valueFrom:
              configMapKeyRef:
                name: launchpad
                key: launchpad.missioncontrol.openshift.api.url
          - name: LAUNCHPAD_MISSIONCONTROL_OPENSHIFT_CONSOLE_URL
            valueFrom:
              configMapKeyRef:
                name: launchpad
                key: launchpad.missioncontrol.openshift.console.url
          - name: LAUNCHPAD_MISSIONCONTROL_GITHUB_USERNAME
            valueFrom:
              configMapKeyRef:
                name: launchpad
                key: launchpad.missioncontrol.github.username
          - name: LAUNCHPAD_MISSIONCONTROL_GITHUB_TOKEN
            valueFrom:
              configMapKeyRef:
                name: launchpad
                key: launchpad.missioncontrol.github.token
          - name: LAUNCHPAD_KEYCLOAK_URL
            valueFrom:
              configMapKeyRef:
                name: launchpad
                key: launchpad.keycloak.url
          - name: LAUNCHPAD_KEYCLOAK_REALM
            valueFrom:
              configMapKeyRef:
                name: launchpad
                key: launchpad.keycloak.realm
          - name: LAUNCHPAD_MISSIONCONTROL_OPENSHIFT_USERNAME
            valueFrom:
              configMapKeyRef:
                name: launchpad
                key: launchpad.missioncontrol.openshift.username
          - name: LAUNCHPAD_MISSIONCONTROL_OPENSHIFT_PASSWORD
            valueFrom:
              configMapKeyRef:
                name: launchpad
                key: launchpad.missioncontrol.openshift.password
          - name: LAUNCHPAD_TRACKER_SEGMENT_TOKEN
            valueFrom:
              configMapKeyRef:
                name: launchpad
                key: launchpad.tracker.segment.token
          image: ${MISSIONCONTROL_IMAGE}:${MISSIONCONTROL_IMAGE_TAG}
          imagePullPolicy: Always
          name: launchpad-missioncontrol
          ports:
          - containerPort: 8080
            protocol: TCP
          terminationMessagePath: /dev/termination-log
          readinessProbe:
            httpGet:
              path: /api/health/ready
              port: 8080
              scheme: HTTP
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              path: /api/health/ready
              port: 8080
              scheme: HTTP
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              memory: 1Gi
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
- kind: Service
  apiVersion: v1
  metadata:
    name: launchpad-missioncontrol
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: launchpad-missioncontrol
    sessionAffinity: None
    type: ClusterIP
- kind: Route
  apiVersion: v1
  metadata:
    name: launchpad-missioncontrol
  spec:
    to:
      kind: Service
      name: launchpad-missioncontrol
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: launchpad-backend
  spec:
    replicas: 1
    selector:
      service: launchpad-backend
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          service: launchpad-backend
      spec:
        containers:
        - env:
          - name: LAUNCHPAD_BACKEND_CATALOG_GIT_REPOSITORY
            valueFrom:
              configMapKeyRef:
                name: launchpad
                key: launchpad.backend.catalog.git.repository
          - name: LAUNCHPAD_BACKEND_CATALOG_GIT_REF
            valueFrom:
              configMapKeyRef:
                name: launchpad
                key: launchpad.backend.catalog.git.ref
          image: ${BACKEND_IMAGE}:${BACKEND_IMAGE_TAG}
          imagePullPolicy: Always
          name: launchpad-backend
          ports:
          - containerPort: 8080
            protocol: TCP
          terminationMessagePath: /dev/termination-log
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 8080
              scheme: HTTP
            failureThreshold: 3
            initialDelaySeconds: 300
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              path: /health/ready
              port: 8080
              scheme: HTTP
            failureThreshold: 3
            initialDelaySeconds: 300
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            limits:
              memory: 1500Mi
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      service: launchpad-backend
    name: launchpad-backend
  spec:
    ports:
    - name: "8080"
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      service: launchpad-backend
    sessionAffinity: None
    type: ClusterIP
- kind: Route
  apiVersion: v1
  metadata:
    name: launchpad-backend
  spec:
    to:
      kind: Service
      name: launchpad-backend
      weight: 100
    wildcardPolicy: None
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: launchpad-frontend
  spec:
    replicas: 1
    selector:
      service: launchpad-frontend
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          service: launchpad-frontend
      spec:
        containers:
        - image: ${FRONTEND_IMAGE}:${FRONTEND_IMAGE_TAG}
          imagePullPolicy: Always
          name: launchpad-frontend
          ports:
          - containerPort: 8080
            protocol: TCP
          env:
          - name: LAUNCHPAD_BACKEND_URL
            value: /
          - name: LAUNCHPAD_MISSIONCONTROL_URL
            value: /
          - name: LAUNCHPAD_KEYCLOAK_URL
            valueFrom:
              configMapKeyRef:
                name: launchpad
                key: launchpad.keycloak.url
          - name: LAUNCHPAD_KEYCLOAK_REALM
            valueFrom:
              configMapKeyRef:
                name: launchpad
                key: launchpad.keycloak.realm
          - name: LAUNCHPAD_TRACKER_SEGMENT_TOKEN
            valueFrom:
              configMapKeyRef:
                name: launchpad
                key: launchpad.tracker.segment.token
          resources: {}
          terminationMessagePath: /dev/termination-log
          readinessProbe:
            httpGet:
              path: /wizard
              port: 8080
            initialDelaySeconds: 120
            timeoutSeconds: 10
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /wizard
              port: 8080
            initialDelaySeconds: 60
            timeoutSeconds: 10
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
        restartPolicy: Always
        dnsPolicy: ClusterFirst
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      service: launchpad-frontend
    name: launchpad-frontend
  spec:
    ports:
    - name: "8080"
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      service: launchpad-frontend
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    generation: 1
    labels:
      run: launchpad-nginx
    name: launchpad-nginx
  spec:
    replicas: 1
    selector:
      run: launchpad-nginx
    strategy:
      resources:
        requests:
          cpu: 20m
          memory: 50Mi
        limits:
          cpu: 200m
          memory: 200Mi
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          run: launchpad-nginx
      spec:
        containers:
        - image: registry.centos.org/kbsingh/openshift-nginx:latest
          imagePullPolicy: Always
          name: launchpad-nginx
          ports:
          - containerPort: 8080
            protocol: TCP
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /etc/nginx/nginx.conf
            subPath: nginx.conf 
            name: configmap-volume
          readinessProbe:
            httpGet:
              path: /wizard
              port: 8080
            initialDelaySeconds: 120
            timeoutSeconds: 10
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /wizard
              port: 8080
            initialDelaySeconds: 60
            timeoutSeconds: 10
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
        volumes:
        - name: configmap-volume
          configMap:
            name: launchpad-nginx
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
  status: {}
- apiVersion: v1
  kind: Service
  metadata:
    name: launchpad-nginx
    annotations:
      service.alpha.openshift.io/dependencies: "[{\"name\":\"launchpad-frontend\",\"namespace\":\"\",\"kind\":\"Service\"},{\"name\":\"launchpad-backend\",\"namespace\":\"\",\"kind\":\"Service\"},{\"name\":\"launchpad-missioncontrol\",\"namespace\":\"\",\"kind\":\"Service\"}]"
  spec:
    ports:
    - name: "8080"
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      run: launchpad-nginx
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata: 
    name: launchpad-nginx
  spec:
    to:
      kind: Service
      name: launchpad-nginx
      weight: 100
    wildcardPolicy: None
  status: {}
